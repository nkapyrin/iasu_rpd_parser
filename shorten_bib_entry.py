#encoding:utf-8
import re

skip_sequences = [ u"Другие виды литературы", u"Учебно-методическая литература", u"Учебная и методическая литература", u"Интернет-сайты", u"http", u"http://", u"литература по всему курсу", u"литература по курсу", u"литература к разделу", u"по всему курсу", u"Для проведения теоретического раздела:", u"Для проведения методико-практического раздела:", u"Для проведения теоретического раздела:" ]
# Последовательности, которые ознозначно означают что 
end_sequences = sorted( [ u"1-е", u"2-е", u"3-е", u"4-е", u"5-е", u"6-е", u"7-е", u"8-е", u"Книга 2", u"Книги 1", u"Книга 1", u"ч.1", u"ч.2", u"Уфа", u" Справочник", u"Монография", u"Физ.-мат", u"М. Эдиториал", u"УРСС", u"Одеса", u"Одесса", u"Томск", u"Спб", u"КОРОНА-ВЕК", u"М.,Машиностроение", u"Журнал Фазотрон", u"ДМК Пресс", u"Москва", u"Харьков", u"Самара", u"С-Петербург", u"С Петербург", u": Уч. пособие",  u"ГНЦ-РФ", u"Л., Энергия", u"Издательство Феникс", u"РИО МАИ", u"БХВ", u"Астрахань", u"МГИМО", u"- Л.", u"Под ред.", u"Под общей редакцией", u"Под редакцией", u": Учебник для вузов", u"Учебник для ВУЗов", u"учебник по направл.", u"— М", u"Нижний Новгород", u"Дрофа", u"Изд-во", u"изд-во", u"Издательство", u". Машиностроение", u"Энергоатомиздат", u"ЛЭТИ", u". Москва,", u"Физико-математическая литература", u"ВВИА", u"- Тула", u"Тула", u"Тульский государственный университет", u"Учеб. пособие", u"Учеб.пособие", u"(для технических вузов", u"учеб. пособие", u": учеб.", u": Учеб.", u"(спец.)", u"по спец.", u"по специальности", u"Учебник для", u"учебник для вузов", u" М.,", u"Москва:", u". – М., ", u"– М.", u"- М.", u"-М.", u"Пер. с англ", u"Пер. с нем", u"Пер.с англ", u"Пер.с нем", u".-СПб.", u"СПб", u"-СПб.", u"СПб:", u"– СПб", u"–СПб", u"- СПб.", u"СПб:СПбГУ", u"СПб:СПбГУ,", u"БХВ- Петербург", u"– СПб.: БХВ-Петербург,", u"– СПб.: БХВ-Петербург", u"– СПб.: Питер,", u"– СПб.: Питер", u"ISBN", u"[Текст]", u"[Электронный ресурс]", u"МИСиС", u"Станкин", u". М,", u"Высшая школа", u"М., Высшая школа", u"Высш.шк.", u"Электронная версия", u". Логос, ", u". – М., ", u"М.:", u"– М.", u"- М.", u"Москва:Техносфера", u"ТЕХНОСФЕРА", u"МАИ, каф.303,", u"-М.: МАИ", u"МАИ, каф.303", u"МАИ,", u"МАИ", u"МАИ-ПРИНТ", u"МАИ-ПРИНТ,", u"-Санкт-Петербург", u"Солон-Пресс", u"Додека", u"Компэл", ",-", u"/", u"М: Наука", u"М., Наука", u"М., Мир", u"М., Эдиториал УРСС", u"Доброе слово", u"Доброе Слово", u"М.: Радиотехника", u"М..:Радиотехника", u"Л., Энергия", u", Изд", u"-М. ФИЗМАТЛИТ", u"[Пособие для", u"Раздел «", u"Мир,", u"Лань,", u"2-е изд."], key = lambda e:len(e), reverse=True )
# Если в тексте встречается это сочетание, заменить весь текст на это сочетание
radical_replace = sorted( [ u"Ориентация и навигация подвижных объектов: современные навигационные технологии", u"Ориентация и навигация подвижных объектов"], key = lambda e:len(e), reverse=True )
end_sequences_second_half = sorted( [ u"под редакцией", u"Под ред.", u"Под научной ред", u"Под. ред.", u"под ред.", u'Учебное пособие', u'учебное пособие', u'учеб.', u'Учебник', u'Учебно-методическое', u"учебник и практикум" ], key = lambda e:len(e), reverse=True )
remove_symbols = sorted( [ u"\"", u"• ", u"• ", u"•", u"«", u"»", u"…", u"“", u"”" u"и др.", '  ', '/', '|','\n','\r' ], key=lambda e:len(e), reverse=True )

# Преобразовать библиографическую запись в ключ для поиска по базе данных
def shorten( entry ):

  # Регулярное выражение для года издания
  years = re.findall( '[12][901]\d\d', entry )

  # Если строка содержит стоп-последовательность, это замедомо не библиографическая запись
  for kk in skip_sequences:
      if kk in entry: return ""

  # Убрать множественные пробелы
  while '  ' in entry: entry = entry.replace( '  ', ' ' )

  # Обрезать строку по некоторым ключевым концевым последовательностям
  for ee in end_sequences:
      if ee in entry: entry = entry[:entry.find(ee)]

  # Обрезать строку по регулярному выражению для количества страниц
  page_seq = re.findall( u'[–]*\s*\d+\s*[cсСC]\s*[.]?', entry ) # (–)?+(\.)
  for ps in page_seq: entry = entry.replace( ps, "" )

  # Некоторые последовательности служат окончательными только начиная со второй трети сообщения
  for sh in end_sequences_second_half:
    if sh in entry[int(len(entry)/3):]: entry = entry[:entry.find(sh)]
  
  # Добавить год к ключу, если это не техническая литература и если год имеется
  if len(years) > 0 and years[-1] in entry and u"СанПиН" not in entry and u"ГОСТ" not in entry and u"НРБ" not in entry and u"СНиП" not in entry and u"Федеральный закон" not in entry:
      entry = entry[ :entry.find(years[0]) ].strip()

  # Убрать некоторые символы в начале, в конце, и внутри строки 
  if len( entry ) > 0:
      for s in remove_symbols:
        while len(entry) >= len(s) and s in entry: entry = entry.replace(s, ' ')
      # Убрать символы в конце биб.ключа, которыми он не может заканчиваться
      while len(entry) > 0 and entry[-1] in u"().- ,;:MМЛ–": entry = entry[:-1]
      # Убрать символы в начале биб.ключа, с которых он не может начинаться
      while len(entry) > 0 and entry[0] in u"1234567890().- ,;:": entry = entry[1:]
      # Убрать несколько символов
      # Убрать множественные пробелы
      while '  ' in entry: entry = entry.replace( '  ', ' ' )

  # Встреча такой последовательности заведомо и однозначно определяет книгу
  for rr in radical_replace:
    if rr.lower().replace(' ','') in entry.lower().replace(' ',''): entry = rr; break
  
  # Составить ключ из записи и года
  if len( entry.strip() ) > 0:
    if len(years) > 0: return entry.strip() + u'$' + years[-1]
    else: return entry.strip()
  else: return ""

